// Copyright Drew Noakes. Licensed under the Apache-2.0 license. See the LICENSE file for more details.

using System.Collections.Immutable;
using Xunit;

namespace Figgle.Generator.Tests;

public partial class RenderTextSourceGeneratorTests
{
    private const string ExternalFontFileName = "ANSI Shadow.flf";

    [Theory]
    [InlineData("ANSI Shadow")]
    [InlineData("ansi shadow")]
    public void ExternalFontInAdditionalFiles_RendersText(string fontName)
    {
        string source =
            $$"""
            using Figgle;
            namespace Test.Namespace
            {
                [GenerateFiggleText("Member", "{{fontName}}", "Figgle")]
                internal partial class DemoUsage
                {
                }
            }
            """;
        string expected =
            """
            // Copyright Drew Noakes. Licensed under the Apache-2.0 license. See the LICENSE file for more details.
            
            // <auto-generated>
            //     This code was generated by Figgle.Generator.
            //
            //     https://github.com/drewnoakes/figgle
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            
            namespace Test.Namespace
            {
                partial class DemoUsage
                {
                    public static string Member { get; } = @"███████╗██╗ ██████╗  ██████╗ ██╗     ███████╗
            ██╔════╝██║██╔════╝ ██╔════╝ ██║     ██╔════╝
            █████╗  ██║██║  ███╗██║  ███╗██║     █████╗  
            ██╔══╝  ██║██║   ██║██║   ██║██║     ██╔══╝  
            ██║     ██║╚██████╔╝╚██████╔╝███████╗███████╗
            ╚═╝     ╚═╝ ╚═════╝  ╚═════╝ ╚══════╝╚══════╝
                                                         
            ";
                }
            }
            """;

        var additionalFont = ExternalFontAdditionalText.Create(ExternalFontFileName);

        ValidateOutput(
            source,
            ImmutableArray.Create(additionalFont),
            optionsProvider: null,
            expected);
    }

    [Theory]
    [InlineData("MyCustomFontName", "MyCustomFontName")]
    [InlineData("myCustomFontname", "MyCustomFontName")]
    public void ExternalFontInAdditionalFilesWithExplicitFontNameProperty_RendersText(
        string generateFiggleFontName,
        string externalFontNamePropertyValue)
    {
        string source =
            $$"""
            using Figgle;
            namespace Test.Namespace
            {
                [GenerateFiggleText("Member", "{{generateFiggleFontName}}", "Figgle")]
                internal partial class DemoUsage
                {
                }
            }
            """;
        string expected =
            """
            // Copyright Drew Noakes. Licensed under the Apache-2.0 license. See the LICENSE file for more details.
            
            // <auto-generated>
            //     This code was generated by Figgle.Generator.
            //
            //     https://github.com/drewnoakes/figgle
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            
            namespace Test.Namespace
            {
                partial class DemoUsage
                {
                    public static string Member { get; } = @"███████╗██╗ ██████╗  ██████╗ ██╗     ███████╗
            ██╔════╝██║██╔════╝ ██╔════╝ ██║     ██╔════╝
            █████╗  ██║██║  ███╗██║  ███╗██║     █████╗  
            ██╔══╝  ██║██║   ██║██║   ██║██║     ██╔══╝  
            ██║     ██║╚██████╔╝╚██████╔╝███████╗███████╗
            ╚═╝     ╚═╝ ╚═════╝  ╚═════╝ ╚══════╝╚══════╝
                                                         
            ";
                }
            }
            """;

        var additionalFont = ExternalFontAdditionalText.Create(ExternalFontFileName);

        var optionsProvider = CreateOptionsProvider(
            ExternalFontFileName,
            externalFontNamePropertyValue);

        ValidateOutput(
            source,
            ImmutableArray.Create(additionalFont),
            optionsProvider,
            expected);
    }
}
